# coding: utf-8

"""
    Influx API Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GaugeViewProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'shape': 'str',
        'type': 'str',
        'prefix': 'str',
        'suffix': 'str',
        'legend': 'Legend',
        'decimal_places': 'DecimalPlaces'
    }

    attribute_map = {
        'shape': 'shape',
        'type': 'type',
        'prefix': 'prefix',
        'suffix': 'suffix',
        'legend': 'legend',
        'decimal_places': 'decimalPlaces'
    }

    def __init__(self, shape=None, type=None, prefix=None, suffix=None, legend=None, decimal_places=None):  # noqa: E501
        """GaugeViewProperties - a model defined in OpenAPI"""  # noqa: E501

        self._shape = None
        self._type = None
        self._prefix = None
        self._suffix = None
        self._legend = None
        self._decimal_places = None
        self.discriminator = None

        if shape is not None:
            self.shape = shape
        if type is not None:
            self.type = type
        if prefix is not None:
            self.prefix = prefix
        if suffix is not None:
            self.suffix = suffix
        if legend is not None:
            self.legend = legend
        if decimal_places is not None:
            self.decimal_places = decimal_places

    @property
    def shape(self):
        """Gets the shape of this GaugeViewProperties.  # noqa: E501


        :return: The shape of this GaugeViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this GaugeViewProperties.


        :param shape: The shape of this GaugeViewProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["chronograf-v2"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"  # noqa: E501
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def type(self):
        """Gets the type of this GaugeViewProperties.  # noqa: E501


        :return: The type of this GaugeViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GaugeViewProperties.


        :param type: The type of this GaugeViewProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["gauge"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def prefix(self):
        """Gets the prefix of this GaugeViewProperties.  # noqa: E501


        :return: The prefix of this GaugeViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this GaugeViewProperties.


        :param prefix: The prefix of this GaugeViewProperties.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def suffix(self):
        """Gets the suffix of this GaugeViewProperties.  # noqa: E501


        :return: The suffix of this GaugeViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this GaugeViewProperties.


        :param suffix: The suffix of this GaugeViewProperties.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def legend(self):
        """Gets the legend of this GaugeViewProperties.  # noqa: E501


        :return: The legend of this GaugeViewProperties.  # noqa: E501
        :rtype: Legend
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this GaugeViewProperties.


        :param legend: The legend of this GaugeViewProperties.  # noqa: E501
        :type: Legend
        """

        self._legend = legend

    @property
    def decimal_places(self):
        """Gets the decimal_places of this GaugeViewProperties.  # noqa: E501


        :return: The decimal_places of this GaugeViewProperties.  # noqa: E501
        :rtype: DecimalPlaces
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this GaugeViewProperties.


        :param decimal_places: The decimal_places of this GaugeViewProperties.  # noqa: E501
        :type: DecimalPlaces
        """

        self._decimal_places = decimal_places

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GaugeViewProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
