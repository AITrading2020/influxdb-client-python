# coding: utf-8

"""
    Influx API Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DashboardQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'label': 'str',
        'range': 'DashboardQueryRange',
        'query': 'str',
        'source': 'str',
        'query_config': 'QueryConfig'
    }

    attribute_map = {
        'label': 'label',
        'range': 'range',
        'query': 'query',
        'source': 'source',
        'query_config': 'queryConfig'
    }

    def __init__(self, label=None, range=None, query=None, source=None, query_config=None):  # noqa: E501
        """DashboardQuery - a model defined in OpenAPI"""  # noqa: E501

        self._label = None
        self._range = None
        self._query = None
        self._source = None
        self._query_config = None
        self.discriminator = None

        if label is not None:
            self.label = label
        if range is not None:
            self.range = range
        self.query = query
        if source is not None:
            self.source = source
        if query_config is not None:
            self.query_config = query_config

    @property
    def label(self):
        """Gets the label of this DashboardQuery.  # noqa: E501

        Optional Y-axis user-facing label  # noqa: E501

        :return: The label of this DashboardQuery.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DashboardQuery.

        Optional Y-axis user-facing label  # noqa: E501

        :param label: The label of this DashboardQuery.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def range(self):
        """Gets the range of this DashboardQuery.  # noqa: E501


        :return: The range of this DashboardQuery.  # noqa: E501
        :rtype: DashboardQueryRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this DashboardQuery.


        :param range: The range of this DashboardQuery.  # noqa: E501
        :type: DashboardQueryRange
        """

        self._range = range

    @property
    def query(self):
        """Gets the query of this DashboardQuery.  # noqa: E501


        :return: The query of this DashboardQuery.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this DashboardQuery.


        :param query: The query of this DashboardQuery.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def source(self):
        """Gets the source of this DashboardQuery.  # noqa: E501

        Optional URI for data source for this query  # noqa: E501

        :return: The source of this DashboardQuery.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DashboardQuery.

        Optional URI for data source for this query  # noqa: E501

        :param source: The source of this DashboardQuery.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def query_config(self):
        """Gets the query_config of this DashboardQuery.  # noqa: E501


        :return: The query_config of this DashboardQuery.  # noqa: E501
        :rtype: QueryConfig
        """
        return self._query_config

    @query_config.setter
    def query_config(self, query_config):
        """Sets the query_config of this DashboardQuery.


        :param query_config: The query_config of this DashboardQuery.  # noqa: E501
        :type: QueryConfig
        """

        self._query_config = query_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
