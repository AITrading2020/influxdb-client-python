# coding: utf-8

"""
    Influx API Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class QueryConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'database': 'str',
        'measurement': 'str',
        'retention_policy': 'str',
        'are_tags_accepted': 'bool',
        'raw_text': 'str',
        'tags': 'object',
        'group_by': 'QueryConfigGroupBy',
        'fields': 'list[Field]',
        'range': 'QueryConfigRange'
    }

    attribute_map = {
        'id': 'id',
        'database': 'database',
        'measurement': 'measurement',
        'retention_policy': 'retentionPolicy',
        'are_tags_accepted': 'areTagsAccepted',
        'raw_text': 'rawText',
        'tags': 'tags',
        'group_by': 'groupBy',
        'fields': 'fields',
        'range': 'range'
    }

    def __init__(self, id=None, database=None, measurement=None, retention_policy=None, are_tags_accepted=None, raw_text=None, tags=None, group_by=None, fields=None, range=None):  # noqa: E501
        """QueryConfig - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._database = None
        self._measurement = None
        self._retention_policy = None
        self._are_tags_accepted = None
        self._raw_text = None
        self._tags = None
        self._group_by = None
        self._fields = None
        self._range = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.database = database
        self.measurement = measurement
        self.retention_policy = retention_policy
        self.are_tags_accepted = are_tags_accepted
        if raw_text is not None:
            self.raw_text = raw_text
        self.tags = tags
        self.group_by = group_by
        self.fields = fields
        if range is not None:
            self.range = range

    @property
    def id(self):
        """Gets the id of this QueryConfig.  # noqa: E501


        :return: The id of this QueryConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueryConfig.


        :param id: The id of this QueryConfig.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def database(self):
        """Gets the database of this QueryConfig.  # noqa: E501


        :return: The database of this QueryConfig.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this QueryConfig.


        :param database: The database of this QueryConfig.  # noqa: E501
        :type: str
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")  # noqa: E501

        self._database = database

    @property
    def measurement(self):
        """Gets the measurement of this QueryConfig.  # noqa: E501


        :return: The measurement of this QueryConfig.  # noqa: E501
        :rtype: str
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement):
        """Sets the measurement of this QueryConfig.


        :param measurement: The measurement of this QueryConfig.  # noqa: E501
        :type: str
        """
        if measurement is None:
            raise ValueError("Invalid value for `measurement`, must not be `None`")  # noqa: E501

        self._measurement = measurement

    @property
    def retention_policy(self):
        """Gets the retention_policy of this QueryConfig.  # noqa: E501


        :return: The retention_policy of this QueryConfig.  # noqa: E501
        :rtype: str
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this QueryConfig.


        :param retention_policy: The retention_policy of this QueryConfig.  # noqa: E501
        :type: str
        """
        if retention_policy is None:
            raise ValueError("Invalid value for `retention_policy`, must not be `None`")  # noqa: E501

        self._retention_policy = retention_policy

    @property
    def are_tags_accepted(self):
        """Gets the are_tags_accepted of this QueryConfig.  # noqa: E501


        :return: The are_tags_accepted of this QueryConfig.  # noqa: E501
        :rtype: bool
        """
        return self._are_tags_accepted

    @are_tags_accepted.setter
    def are_tags_accepted(self, are_tags_accepted):
        """Sets the are_tags_accepted of this QueryConfig.


        :param are_tags_accepted: The are_tags_accepted of this QueryConfig.  # noqa: E501
        :type: bool
        """
        if are_tags_accepted is None:
            raise ValueError("Invalid value for `are_tags_accepted`, must not be `None`")  # noqa: E501

        self._are_tags_accepted = are_tags_accepted

    @property
    def raw_text(self):
        """Gets the raw_text of this QueryConfig.  # noqa: E501


        :return: The raw_text of this QueryConfig.  # noqa: E501
        :rtype: str
        """
        return self._raw_text

    @raw_text.setter
    def raw_text(self, raw_text):
        """Sets the raw_text of this QueryConfig.


        :param raw_text: The raw_text of this QueryConfig.  # noqa: E501
        :type: str
        """

        self._raw_text = raw_text

    @property
    def tags(self):
        """Gets the tags of this QueryConfig.  # noqa: E501


        :return: The tags of this QueryConfig.  # noqa: E501
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this QueryConfig.


        :param tags: The tags of this QueryConfig.  # noqa: E501
        :type: object
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def group_by(self):
        """Gets the group_by of this QueryConfig.  # noqa: E501


        :return: The group_by of this QueryConfig.  # noqa: E501
        :rtype: QueryConfigGroupBy
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this QueryConfig.


        :param group_by: The group_by of this QueryConfig.  # noqa: E501
        :type: QueryConfigGroupBy
        """
        if group_by is None:
            raise ValueError("Invalid value for `group_by`, must not be `None`")  # noqa: E501

        self._group_by = group_by

    @property
    def fields(self):
        """Gets the fields of this QueryConfig.  # noqa: E501


        :return: The fields of this QueryConfig.  # noqa: E501
        :rtype: list[Field]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this QueryConfig.


        :param fields: The fields of this QueryConfig.  # noqa: E501
        :type: list[Field]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    @property
    def range(self):
        """Gets the range of this QueryConfig.  # noqa: E501


        :return: The range of this QueryConfig.  # noqa: E501
        :rtype: QueryConfigRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this QueryConfig.


        :param range: The range of this QueryConfig.  # noqa: E501
        :type: QueryConfigRange
        """

        self._range = range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
