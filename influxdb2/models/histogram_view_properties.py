# coding: utf-8

"""
    Influx API Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HistogramViewProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'shape': 'str',
        'type': 'str',
        'x_column': 'str',
        'fill_columns': 'list[str]',
        'x_domain': 'list[float]',
        'x_axis_label': 'str',
        'position': 'str',
        'bin_count': 'int'
    }

    attribute_map = {
        'shape': 'shape',
        'type': 'type',
        'x_column': 'xColumn',
        'fill_columns': 'fillColumns',
        'x_domain': 'xDomain',
        'x_axis_label': 'xAxisLabel',
        'position': 'position',
        'bin_count': 'binCount'
    }

    def __init__(self, shape=None, type=None, x_column=None, fill_columns=None, x_domain=None, x_axis_label=None, position=None, bin_count=None):  # noqa: E501
        """HistogramViewProperties - a model defined in OpenAPI"""  # noqa: E501

        self._shape = None
        self._type = None
        self._x_column = None
        self._fill_columns = None
        self._x_domain = None
        self._x_axis_label = None
        self._position = None
        self._bin_count = None
        self.discriminator = None

        if shape is not None:
            self.shape = shape
        if type is not None:
            self.type = type
        if x_column is not None:
            self.x_column = x_column
        if fill_columns is not None:
            self.fill_columns = fill_columns
        if x_domain is not None:
            self.x_domain = x_domain
        if x_axis_label is not None:
            self.x_axis_label = x_axis_label
        if position is not None:
            self.position = position
        if bin_count is not None:
            self.bin_count = bin_count

    @property
    def shape(self):
        """Gets the shape of this HistogramViewProperties.  # noqa: E501


        :return: The shape of this HistogramViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this HistogramViewProperties.


        :param shape: The shape of this HistogramViewProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["chronograf-v2"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"  # noqa: E501
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def type(self):
        """Gets the type of this HistogramViewProperties.  # noqa: E501


        :return: The type of this HistogramViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HistogramViewProperties.


        :param type: The type of this HistogramViewProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["histogram"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def x_column(self):
        """Gets the x_column of this HistogramViewProperties.  # noqa: E501


        :return: The x_column of this HistogramViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._x_column

    @x_column.setter
    def x_column(self, x_column):
        """Sets the x_column of this HistogramViewProperties.


        :param x_column: The x_column of this HistogramViewProperties.  # noqa: E501
        :type: str
        """

        self._x_column = x_column

    @property
    def fill_columns(self):
        """Gets the fill_columns of this HistogramViewProperties.  # noqa: E501


        :return: The fill_columns of this HistogramViewProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._fill_columns

    @fill_columns.setter
    def fill_columns(self, fill_columns):
        """Sets the fill_columns of this HistogramViewProperties.


        :param fill_columns: The fill_columns of this HistogramViewProperties.  # noqa: E501
        :type: list[str]
        """

        self._fill_columns = fill_columns

    @property
    def x_domain(self):
        """Gets the x_domain of this HistogramViewProperties.  # noqa: E501


        :return: The x_domain of this HistogramViewProperties.  # noqa: E501
        :rtype: list[float]
        """
        return self._x_domain

    @x_domain.setter
    def x_domain(self, x_domain):
        """Sets the x_domain of this HistogramViewProperties.


        :param x_domain: The x_domain of this HistogramViewProperties.  # noqa: E501
        :type: list[float]
        """

        self._x_domain = x_domain

    @property
    def x_axis_label(self):
        """Gets the x_axis_label of this HistogramViewProperties.  # noqa: E501


        :return: The x_axis_label of this HistogramViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._x_axis_label

    @x_axis_label.setter
    def x_axis_label(self, x_axis_label):
        """Sets the x_axis_label of this HistogramViewProperties.


        :param x_axis_label: The x_axis_label of this HistogramViewProperties.  # noqa: E501
        :type: str
        """

        self._x_axis_label = x_axis_label

    @property
    def position(self):
        """Gets the position of this HistogramViewProperties.  # noqa: E501


        :return: The position of this HistogramViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this HistogramViewProperties.


        :param position: The position of this HistogramViewProperties.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def bin_count(self):
        """Gets the bin_count of this HistogramViewProperties.  # noqa: E501


        :return: The bin_count of this HistogramViewProperties.  # noqa: E501
        :rtype: int
        """
        return self._bin_count

    @bin_count.setter
    def bin_count(self, bin_count):
        """Sets the bin_count of this HistogramViewProperties.


        :param bin_count: The bin_count of this HistogramViewProperties.  # noqa: E501
        :type: int
        """

        self._bin_count = bin_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistogramViewProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
