# coding: utf-8

"""
    Influx API Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class XYViewProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'axes': 'Axes',
        'shape': 'str',
        'type': 'str',
        'legend': 'Legend',
        'geom': 'str'
    }

    attribute_map = {
        'axes': 'axes',
        'shape': 'shape',
        'type': 'type',
        'legend': 'legend',
        'geom': 'geom'
    }

    def __init__(self, axes=None, shape=None, type=None, legend=None, geom=None):  # noqa: E501
        """XYViewProperties - a model defined in OpenAPI"""  # noqa: E501

        self._axes = None
        self._shape = None
        self._type = None
        self._legend = None
        self._geom = None
        self.discriminator = None

        if axes is not None:
            self.axes = axes
        if shape is not None:
            self.shape = shape
        if type is not None:
            self.type = type
        if legend is not None:
            self.legend = legend
        if geom is not None:
            self.geom = geom

    @property
    def axes(self):
        """Gets the axes of this XYViewProperties.  # noqa: E501


        :return: The axes of this XYViewProperties.  # noqa: E501
        :rtype: Axes
        """
        return self._axes

    @axes.setter
    def axes(self, axes):
        """Sets the axes of this XYViewProperties.


        :param axes: The axes of this XYViewProperties.  # noqa: E501
        :type: Axes
        """

        self._axes = axes

    @property
    def shape(self):
        """Gets the shape of this XYViewProperties.  # noqa: E501


        :return: The shape of this XYViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this XYViewProperties.


        :param shape: The shape of this XYViewProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["chronograf-v2"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"  # noqa: E501
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def type(self):
        """Gets the type of this XYViewProperties.  # noqa: E501


        :return: The type of this XYViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this XYViewProperties.


        :param type: The type of this XYViewProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["xy"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def legend(self):
        """Gets the legend of this XYViewProperties.  # noqa: E501


        :return: The legend of this XYViewProperties.  # noqa: E501
        :rtype: Legend
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this XYViewProperties.


        :param legend: The legend of this XYViewProperties.  # noqa: E501
        :type: Legend
        """

        self._legend = legend

    @property
    def geom(self):
        """Gets the geom of this XYViewProperties.  # noqa: E501


        :return: The geom of this XYViewProperties.  # noqa: E501
        :rtype: str
        """
        return self._geom

    @geom.setter
    def geom(self, geom):
        """Sets the geom of this XYViewProperties.


        :param geom: The geom of this XYViewProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["line", "step", "stacked", "bar"]  # noqa: E501
        if geom not in allowed_values:
            raise ValueError(
                "Invalid value for `geom` ({0}), must be one of {1}"  # noqa: E501
                .format(geom, allowed_values)
            )

        self._geom = geom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XYViewProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
